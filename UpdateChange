[ 2016. 07. 27 적용 완료]

#패키지 분리하기
#메인에서 리사이클러뷰 마지막에 add 제거하고, floating 형태의 버튼을 두고 바로 SearchAt로 이동하게 변경


// colors.xml
<resources>
    <color name="blue_6799ff">#6799ff</color>
</resources>


// strings.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>

   <string name="app_name">음력날짜 검색</string>
    <string name="hello_world">Hello world!</string>
    <string name="action_settings">Settings</string>
    
    <string name="txt_memo">간단한 메모를 작성해주세요.</string>
    
    <string name="txt_search_date">음력 날짜입력</string>
    
    <string name="txt_year">년</string>
    <string name="txt_month">월</string>
    <string name="txt_day">일</string>
    
    <string name="txt_hour">시</string>
    <string name="txt_minute">분</string>
    
    <string name="txt_add_date">날짜추가</string>
    <string name="txt_add_alarm">알람추가</string>

</resources>


// at_lunar_sesarch.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#EAEAEA" >

    <Button
        android:id="@+id/btSearchDate"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="10dp"
        android:background="#6799FF"
        android:text="@string/txt_search_date"
        android:textAppearance="?android:attr/textAppearanceMedium"
        android:textColor="#EAEAEA" />

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/btSearchDate"
        android:fillViewport="true" >

        <RelativeLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent" >

            <RelativeLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_centerInParent="true"
                android:padding="10dp" >

                <TextView
                    android:id="@+id/tvConvertDate"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:gravity="center"
                    android:textAppearance="?android:attr/textAppearanceLarge"
                    android:textColor="#6799FF" />
            </RelativeLayout>

            <LinearLayout
                android:id="@+id/llEditArea"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_alignParentBottom="true"
                android:orientation="vertical"
                android:padding="10dp" >

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:gravity="center"
                    android:orientation="horizontal" >

                    <EditText
                        android:id="@+id/etMemo"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:layout_weight="1"
                        android:hint="@string/txt_memo"
                        android:textAppearance="?android:attr/textAppearanceSmall"
                        android:visibility="gone" />

                    <ImageView
                        android:id="@+id/ivAlarm"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginLeft="10dp"
                        android:src="@drawable/icon_time"
                        android:visibility="gone" />
                </LinearLayout>

                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="10dp"
                    android:gravity="center"
                    android:orientation="horizontal" >

                    <Button
                        android:id="@+id/btAddFavorite"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_marginRight="5dp"
                        android:layout_weight="1"
                        android:background="#6799FF"
                        android:text="@string/txt_add_date"
                        android:textAppearance="?android:attr/textAppearanceMedium"
                        android:textColor="#EAEAEA"
                        android:visibility="gone" />

                    <Button
                        android:id="@+id/btAddAlarm"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:layout_weight="1"
                        android:background="#6799FF"
                        android:text="@string/txt_add_alarm"
                        android:textAppearance="?android:attr/textAppearanceMedium"
                        android:textColor="#EAEAEA" />
                </LinearLayout>
            </LinearLayout>
        </RelativeLayout>
    </ScrollView>

    <com.albert.study.lunar.calendar.AlarmAddOverlay
        android:id="@+id/overlayAlarm"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:visibility="gone" />

</RelativeLayout>




// CommUtils.java
package com.albert.study.lunar.calendar;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import android.app.Activity;
import android.content.Context;
import android.view.View;
import android.view.inputmethod.InputMethodManager;

import com.ibm.icu.util.ChineseCalendar;

public class CommUtils {

	public static int 	displayWidth;
	public static int 	displayHeight;
	public static int 	displayDpi;
	public static float displayScale;

	public static final SimpleDateFormat mReceiveFormat = new SimpleDateFormat ( "yyyyMMdd");
	public static final SimpleDateFormat mShowFormat = new SimpleDateFormat ( "yyyy. MM. dd");

	public static class LunarSolarEntity {
		
		String lunarDate;
		String solarDate;
		String convertDate;
		
		public String getLunarDate() {
			return lunarDate;
		}
		public void setLunarDate(String lunarDate) {
			this.lunarDate = lunarDate;
		}
		public String getSolarDate() {
			return solarDate;
		}
		public void setSolarDate(String solarDate) {
			this.solarDate = solarDate;
		}
		public String getConvertDate() {
			return convertDate;
		}
		public void setConvertDate(String convertDate) {
			this.convertDate = convertDate;
		}
	}
	
	
	public static String getDateByShowForamt(Date date) {
		return mShowFormat.format(date);
	}

	public static String getShowFormat(String strDate)
	{
		try {
			Date date = mReceiveFormat.parse(strDate);
			return getDateByShowForamt(date);	
		}
		catch (Exception e) {
			e.printStackTrace();

			return "";
		}
	}

	/**
	 * 음력날짜를 양력날짜로 변환
	 * @param 음력날짜 (yyyyMMdd)
	 * @return 양력날짜 (yyyyMMdd)
	 */
	public static String convertStringLunarToSolar(String date) {
		
		ChineseCalendar cc = new ChineseCalendar();
		Calendar cal = Calendar.getInstance();

		cc.set(ChineseCalendar.EXTENDED_YEAR, Integer.parseInt(date.substring(0, 4)) + 2637);
		cc.set(ChineseCalendar.MONTH, Integer.parseInt(date.substring(4, 6)) - 1);
		cc.set(ChineseCalendar.DAY_OF_MONTH, Integer.parseInt(date.substring(6)));

		cal.setTimeInMillis(cc.getTimeInMillis());

		return mReceiveFormat.format(cal.getTime());
	}
	
	/**
	 * 양력날짜를 음력날짜로 변환
	 * @param 양력날짜 (yyyyMMdd)
	 * @return 음력날짜 (yyyyMMdd)
	 */
	public static String converStringSolarToLunar(String date) {
		
		ChineseCalendar cc = new ChineseCalendar();
		Calendar cal = Calendar.getInstance();

		cal.set(Calendar.YEAR, Integer.parseInt(date.substring(0, 4)));
		cal.set(Calendar.MONTH, Integer.parseInt(date.substring(4, 6)) - 1);
		cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(date.substring(6)));

		cc.setTimeInMillis(cal.getTimeInMillis());

		int y = cc.get(ChineseCalendar.EXTENDED_YEAR) - 2637;
		int m = cc.get(ChineseCalendar.MONTH) + 1;
		int d = cc.get(ChineseCalendar.DAY_OF_MONTH);

		StringBuffer ret = new StringBuffer();
		ret.append(String.format("%04d", y));
		ret.append(String.format("%02d", m));
		ret.append(String.format("%02d", d));

		return ret.toString();
	}
	

	/**
	 * 음력날짜를 양력날짜로 변환
	 * @param 음력날짜 (yyyyMMdd)
	 * @return 양력날짜 (yyyyMMdd)
	 */
	public static LunarSolarEntity convertLunarToSolar(String date) {
		
		LunarSolarEntity tmpResult = new LunarSolarEntity();
		tmpResult.setLunarDate(date);
		
		ChineseCalendar cc = new ChineseCalendar();
		Calendar cal = Calendar.getInstance();

		cc.set(ChineseCalendar.EXTENDED_YEAR, Integer.parseInt(date.substring(0, 4)) + 2637);
		cc.set(ChineseCalendar.MONTH, Integer.parseInt(date.substring(4, 6)) - 1);
		cc.set(ChineseCalendar.DAY_OF_MONTH, Integer.parseInt(date.substring(6)));

		cal.setTimeInMillis(cc.getTimeInMillis());

		tmpResult.setConvertDate(getDateByShowForamt(cal.getTime()));
		tmpResult.setSolarDate(mReceiveFormat.format(cal.getTime()));
		
		return tmpResult;
	}

	/**
	 * 양력날짜를 음력날짜로 변환
	 * @param 양력날짜 (yyyyMMdd)
	 * @return 음력날짜 (yyyyMMdd)
	 */
	public static LunarSolarEntity converSolarToLunar(String date) {
		
		LunarSolarEntity tmpResult = new LunarSolarEntity();
		tmpResult.setSolarDate(date);
		
		ChineseCalendar cc = new ChineseCalendar();
		Calendar cal = Calendar.getInstance();

		cal.set(Calendar.YEAR, Integer.parseInt(date.substring(0, 4)));
		cal.set(Calendar.MONTH, Integer.parseInt(date.substring(4, 6)) - 1);
		cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(date.substring(6)));

		cc.setTimeInMillis(cal.getTimeInMillis());

		int y = cc.get(ChineseCalendar.EXTENDED_YEAR) - 2637;
		int m = cc.get(ChineseCalendar.MONTH) + 1;
		int d = cc.get(ChineseCalendar.DAY_OF_MONTH);

		StringBuffer ret = new StringBuffer();
		ret.append(String.format("%04d", y)).append("-");
		ret.append(String.format("%02d", m)).append("-");
		ret.append(String.format("%02d", d));

		tmpResult.setConvertDate(ret.toString());
		tmpResult.setLunarDate(ret.replace(0, ret.length(), "-").toString());
		
		return tmpResult;
	}

	public static int getDivision(float value)
	{
		//		LogUtil.Logd("getDivision Size", "value = " + (int)(value * (displayHeight / 1280.0f)));
		return (int)(value * (displayHeight / 1280.0f));
	}

	public static float getDivisionFloat(float value)
	{
		//		LogUtil.Logd("getDivision Size", "value = " + (int)(value * (displayHeight / 1280.0f)));
		return value * (displayHeight / 1280.0f);
	}

	public static void hideSoftInput(Activity activity, View view) {
		view.requestFocus();
		InputMethodManager inputManager = (InputMethodManager) activity
				.getSystemService(Context.INPUT_METHOD_SERVICE);
		inputManager.hideSoftInputFromWindow(view.getWindowToken(), 0);
	}

	public static void showSoftInput(Activity activity, View view) {
		view.requestFocus();
		InputMethodManager inputManager = (InputMethodManager) activity
				.getSystemService(Context.INPUT_METHOD_SERVICE);
		inputManager.showSoftInput(view, 0);
	}
}



// FavoriteEntity.java
public class FavoriteEntity {

	private String memo;
	private String solarDate;
	private String lunarDate;
	
	private int alarmHour;
	private int alarmMinute;
	private boolean isAlarmOn;

	public FavoriteEntity () {
		this.memo = null;
		this.solarDate = null;
		this.lunarDate = null;
		this.isAlarmOn = false;
		
		this.alarmHour = 999;
		this.alarmMinute = 999;
	}
	
	public String getMemo() {
		return memo;
	}
	public void setMemo(String memo) {
		this.memo = memo;
	}
	public String getSolarDate() {
		return solarDate;
	}
	public void setSolarDate(String solarDate) {
		this.solarDate = solarDate;
	}
	public String getLunarDate() {
		return lunarDate;
	}
	public void setLunarDate(String lunarDate) {
		this.lunarDate = lunarDate;
	}
	public boolean isAlarmOn() {
		return isAlarmOn;
	}
	public void setAlarmOn(boolean isAlarmOn) {
		this.isAlarmOn = isAlarmOn;
	}
	
	public int getAlarmHour() {
		return alarmHour;
	}

	public void setAlarmHour(int alarmHour) {
		this.alarmHour = alarmHour;
	}

	public int getAlarmMinute() {
		return alarmMinute;
	}

	public void setAlarmMinute(int alarmMinute) {
		this.alarmMinute = alarmMinute;
	}

	public String showLunarDate() {
		return CommUtils.getShowFormat(this.lunarDate);
	}

	public String showSolarDate() {
		return CommUtils.getShowFormat(this.solarDate);
	}

}



// LunarSearchAt.java
public class LunarSearchAt  extends BaseLoadingActivity {

	//	Realm realm;

	@Nullable @Bind(R.id.btSearchDate)
	Button btSearchDate;

	@Nullable @Bind(R.id.btAddFavorite)
	TextView btAddFavorite;

	@Nullable @Bind(R.id.tvConvertDate)
	TextView tvConvertDate;
	
	@Nullable @Bind(R.id.etMemo)
	EditText etMemo;
	
	@Nullable @Bind(R.id.ivAlarm)
	ImageView ivAlarm;
	
	
	@Nullable @Bind(R.id.overlayAlarm)
	AlarmAddOverlay overlayAlarm;

	AlarmObject saveAlarm;

	String selectDate = "";
	LunarSolarEntity tmpDate;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.at_lunar_search);

		ButterKnife.bind(this);

		//		realm = RealmController.with(this).getRealm();;

		overlayAlarm.setAddAlarmListener(alarmCallback, LunarSearchAt.this);
		overlayAlarm.setVisibility(View.GONE);
	}

	AlarmAddListener alarmCallback = new AlarmAddListener() {

		@Override
		public void clickAdd(AlarmObject alarm) {

			saveAlarm = alarm;
			Log.d("AlarmAddLister", " Hour : " + alarm.getHour() + " Minute : " + alarm.getMinute());

			if(saveAlarm.getHour() != 999 && saveAlarm.getMinute() != 999)
				ivAlarm.setVisibility(View.VISIBLE);
			
			overlayAlarm.setVisibility(View.GONE);
		}
	};

	@Nullable @OnClick(R.id.btAddFavorite)
	public void addFavorite()
	{
		try
		{
			FavoriteEntity tmp = new FavoriteEntity();
			
			String memo = etMemo.getText().toString();
			
			if(memo != null)
			{
				if(memo.length() < 1) {
					Toast.makeText(LunarSearchAt.this, getString(R.string.txt_memo), Toast.LENGTH_SHORT).show();
					return;
				} else {
					tmp.setMemo(memo);
				}
			}
			
			// 알람 저장
			if(saveAlarm != null)
			{
				// 알람이 유효할때만 저장하고 알람 상태값 변경하기
				if(saveAlarm.getHour() != 999 || saveAlarm.getMinute() != 999) {
					tmp.setAlarmHour(saveAlarm.getHour());
					tmp.setAlarmMinute(saveAlarm.getMinute());
					
					tmp.setAlarmOn(true);
				}
			}

			tmp.setLunarDate(tmpDate.getLunarDate());
			tmp.setSolarDate(tmpDate.getSolarDate());

			// 키보드 숨기기
			CommUtils.hideSoftInput(LunarSearchAt.this, etMemo);
			
			// add 작업	
		} catch(Exception e) {
			e.printStackTrace();
			Toast.makeText(LunarSearchAt.this, "입력 실패!\n다시 시도해주세요.", Toast.LENGTH_SHORT).show();
		}
		
	}
	
	@Nullable @OnClick(R.id.btAddAlarm)
	public void showAddAlarmOverlay()
	{
		if(selectDate.length() == 8)
			overlayAlarm.setVisibility(View.VISIBLE);
		else
			Toast.makeText(LunarSearchAt.this, "날짜를 선택해 주세요", Toast.LENGTH_SHORT).show();
	}

	@Nullable @OnClick(R.id.btSearchDate)
	public void searchDate() {
		DialogDatePicker();
	}

	// 데이터 피커 다이얼로그
	public void DialogDatePicker(){

		DatePickerDialog.OnDateSetListener mDateSetListener =
				new DatePickerDialog.OnDateSetListener() {
			// onDateSet method
			public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
				int month = monthOfYear+1;
				int day = dayOfMonth;

				String sMonth = "";
				String sDay = "";

				if(month < 10)
					sMonth = "0" + String.valueOf(month);
				else
					sMonth = String.valueOf(month);

				if(day < 10)
					sDay = "0" + String.valueOf(day);
				else
					sDay = String.valueOf(day);

				selectDate = String.valueOf(year) + sMonth + sDay;

				Log.d("DatePicker", "DATE : " + selectDate);

				tmpDate = CommUtils.convertLunarToSolar(selectDate);
				tvConvertDate.setText("양력 " + tmpDate.getConvertDate());

				btSearchDate.setText(CommUtils.getShowFormat(selectDate));
				
				// 날짜 선택시 알람추가 버튼 및 메모 작성공간 보여주기
				btAddFavorite.setVisibility(View.VISIBLE);
				etMemo.setVisibility(View.VISIBLE);
			}
		};

		int cyear;
		int cmonth;
		int cday;

		if(selectDate.length() >= 6)
		{
			cyear = Integer.parseInt(selectDate.substring(0, 4));
			cmonth = Integer.parseInt(selectDate.substring(4, 6)) - 1;
			cday =Integer.parseInt( selectDate.substring(6));
		}
		else
		{
			Calendar c = Calendar.getInstance();

			cyear = c.get(Calendar.YEAR);
			cmonth = c.get(Calendar.MONTH);
			cday = c.get(Calendar.DAY_OF_MONTH);
			
			StringBuffer ret = new StringBuffer();
			ret.append(String.format("%04d", cyear));
			ret.append(String.format("%02d", cmonth + 1));
			ret.append(String.format("%02d", cday));
			
			String tmpData = CommUtils.converStringSolarToLunar(ret.toString());
			cyear = Integer.parseInt(tmpData.substring(0, 4));
			cmonth = Integer.parseInt(tmpData.substring(4, 6)) - 1;
			cday =Integer.parseInt( tmpData.substring(6));
		}

		DatePickerDialog alert = new DatePickerDialog(LunarSearchAt.this,  mDateSetListener, cyear, cmonth, cday);

		// 날짜제한 - 오늘 날짜 이상은 선택이 안되게
		//		alert.getDatePicker().setMaxDate(new Date().getTime());
		alert.show();
	}

	@Override
	public void onBackPressed() {
		
		if(overlayAlarm.getVisibility() == View.VISIBLE) {
			overlayAlarm.setVisibility(View.GONE);
			
			return;
		}
		
		super.onBackPressed();
	}
}




// overlay_add_alarm.xml
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >

    <View
        android:id="@+id/popup_bg"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="#4c000000" />

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true"
        android:layout_margin="10dp"
        android:background="#fff"
        android:gravity="center"
        android:orientation="vertical"
        android:padding="10dp" >

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="51dp"
            android:layout_marginTop="10dp"
            android:orientation="vertical" >

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="50dp"
                android:orientation="horizontal" >

                <TextView
                    android:id="@+id/tvHour"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0.5"
                    android:gravity="center"
                    android:hint="@string/txt_hour" />

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0.8"
                    android:gravity="center"
                    android:text=":" />

                <TextView
                    android:id="@+id/tvMinute"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_weight="0.5"
                    android:gravity="center"
                    android:hint="@string/txt_minute" />
            </LinearLayout>

            <View
                android:layout_width="match_parent"
                android:layout_height="1dp"
                android:background="#4C257F" />
        </LinearLayout>

        <Button
            android:id="@+id/btAlarmAdd"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="10dp"
            android:background="#9449F2"
            android:text="@string/txt_add_alarm"
            android:textAppearance="?android:attr/textAppearanceMedium"
            android:textColor="#fff" />
    </LinearLayout>

</RelativeLayout>



// AlarmAddOverlay.java
public class AlarmAddOverlay extends FrameLayout implements OnClickListener {

	TextView tvHour;
	TextView tvMinute;

	Button btAlarmAdd;
	
	Activity parentAt;

	private AlarmAddListener parentListener;
	private AlarmObject params = new AlarmObject();

	public interface AlarmAddListener {
		public void clickAdd(AlarmObject alarm);
	}

	public void setAddAlarmListener(AlarmAddListener listener, Activity act) {
		parentListener = listener;
		this.parentAt = act;
	}

	public AlarmAddOverlay(Context context, AttributeSet attrs) {
		super(context, attrs);

		LayoutInflater inflater = LayoutInflater.from(getContext());
		final View view = inflater.inflate(R.layout.overlay_add_alarm, this);

		tvHour = (TextView)view.findViewById(R.id.tvHour);
		tvHour.setOnClickListener(this);

		tvMinute = (TextView)view.findViewById(R.id.tvMinute);
		tvMinute.setOnClickListener(this);

		btAlarmAdd = (Button)view.findViewById(R.id.btAlarmAdd);
		btAlarmAdd.setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.tvHour:
		case R.id.tvMinute:
			callNumberPicker();
			break;

		case R.id.btAlarmAdd:
			
			if(params.hour == 999 || params.minute == 999) {
				Toast.makeText(this.getContext(), "시간을 선택 주세요.", Toast.LENGTH_SHORT).show();
				return;
			}
			
			parentListener.clickAdd(params);
			break;
		default:
			break;
		}
	}

	public void callNumberPicker()
	{
		// timepicker set Callback
		OnTimeSetListener tCallBack = new OnTimeSetListener() {
			
			@Override
			public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
				try
				{
					params.setHour(hourOfDay);
					params.setMinute(minute);
					
					tvHour.setText(Integer.toString(hourOfDay));
					tvMinute.setText(Integer.toString(minute));
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}
		};
		
		int hour;
		int min;

		if(params.hour == 999 || params.minute == 999)
		{
			Calendar c = Calendar.getInstance();

			hour = c.get(Calendar.HOUR_OF_DAY);
			min = c.get(Calendar.MINUTE);
		}
		else
		{
			hour = params.hour;
			min = params.minute;
		}

		TimePickerDialog tPicker = new TimePickerDialog(getContext(), tCallBack, hour, min, true);
		tPicker.show();
	}



	// 알람 객체
	public class AlarmObject implements Comparable<AlarmObject>
	{
		int hour;
		int minute;

		public AlarmObject() {
			this.hour = 999;
			this.minute = 999;
		}

		public AlarmObject(@IntRange(from=0, to=23) int hour, @IntRange(from=0, to=59) int minute) {
			this.hour = hour;
			this.minute = minute;
		}

		public int getHour() {
			return hour;
		}

		public void setHour(int hour) {
			this.hour = hour;
		}

		public int getMinute() {
			return minute;
		}

		public void setMinute(int minute) {
			this.minute = minute;
		}

		@Override
		public int compareTo(AlarmObject t) {
			return (this.hour - t.hour)*3600 + (this.minute - t.minute)*60;
		}
	}

}
